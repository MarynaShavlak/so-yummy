{"version":3,"file":"static/js/624.3f37f6ba.chunk.js","mappings":"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","sources":["components/form/Form.styled.jsx","components/form/input/FormInput.styled.jsx","components/form/input/FormInput.jsx","pages/Auth/SigninPage/SigninPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\nimport {\n  RectButton,\n  RectLinkButton,\n} from 'components/common/RectButton.styled';\n\nexport const AuthForm = styled.form`\n  --gap-column-input: 12px;\n\n  margin: 0 auto;\n  padding: 32px 28px 40px;\n\n  background-color: ${({ theme }) => theme.colors.black[300]};\n\n  box-shadow: ${({ theme }) => theme.shadows.base};\n  border-radius: 30px;\n\n  & > div:not(:last-of-type) {\n    margin-bottom: var(--gap-column-input);\n  }\n\n  @media screen and (min-width: ${props => props.theme.breakpoints.tablet}) {\n    --gap-column-input: 24px;\n\n    padding: 44px 50px;\n  }\n\n  @media screen and (min-width: ${props => props.theme.breakpoints.desktop}) {\n    margin-right: 0;\n    margin-left: auto;\n  }\n`;\n\nexport const AuthTitle = styled.h2`\n  margin-bottom: 18px;\n\n  font-weight: ${({ theme }) => theme.fontWeights.semibold};\n  font-size: 24px;\n  line-height: calc(28 / 24);\n  letter-spacing: -0.02em;\n  font-feature-settings: 'liga' off;\n  text-align: left;\n\n  color: ${({ theme }) => theme.colors.white[200]};\n\n  @media screen and (min-width: ${props => props.theme.breakpoints.tablet}) {\n    margin-bottom: 50px;\n\n    font-size: 28px;\n    line-height: calc(30 / 28);\n  }\n`;\n\nexport const Devider = styled.span`\n  display: block;\n\n  margin: var(--gap-column-input) 0;\n  width: 100%;\n  height: 1px;\n\n  background-color: rgba(250, 250, 250, 0.3);\n`;\n\nexport const FormButtonGroup = styled.div`\n  margin-top: 28px;\n  text-align: center;\n\n  @media screen and (min-width: ${props => props.theme.breakpoints.tablet}) {\n    margin-top: 50px;\n  }\n`;\n\nexport const FormSubmitButton = styled(RectButton)`\n  height: 45px;\n\n  &:disabled {\n    opacity: 0.4;\n  }\n\n  @media screen and (min-width: ${props => props.theme.breakpoints.tablet}) {\n    height: 59px;\n  }\n`;\n\nexport const FormGoogleButton = styled(RectLinkButton)`\n  height: 45px;\n\n  @media screen and (min-width: ${props => props.theme.breakpoints.tablet}) {\n    height: 59px;\n  }\n`;\n\nexport const FormNavLinkButton = styled(NavLink)`\n  display: block;\n\n  margin-top: 18px;\n\n  font-size: 14px;\n  line-height: calc(21 / 14);\n  text-decoration-line: underline;\n\n  color: ${({ theme }) => theme.colors.white[200]};\n\n  transition: ${({ theme }) => theme.transitions.create(['color'])};\n\n  &:hover,\n  &:focus {\n    color: ${({ theme }) => theme.colors.green[200]};\n  }\n  @media screen and (min-width: ${props => props.theme.breakpoints.tablet}) {\n    font-size: 16px;\n    line-height: calc(24 / 16);\n  }\n`;\n","import styled from '@emotion/styled';\n\nconst getInputColor =\n  defaultColor =>\n  ({ theme, isError, isTouched, isDirty, isSubmitted }) => {\n    if (isSubmitted) {\n      if (isError) return theme.colors.red[100];\n\n      if (isTouched && isDirty) return theme.colors.green[300];\n    }\n\n    return defaultColor;\n  };\nconst getInputBorderColor = ({ theme, isError, isDirty, isSubmitted }) => {\n  if (isSubmitted) {\n    if (isError) return theme.colors.red[100];\n\n    if (isDirty) return theme.colors.green[300];\n  }\n\n  return theme.colors.white[100];\n};\nconst getIconCursor = ({ isError, isPassword, isSubmitted }) =>\n  isError || (!isSubmitted && isPassword) ? 'pointer' : 'auto';\n\nexport const StyledFormGroup = styled.div`\n  --input-border-color: ${getInputColor('rgba(250, 250, 250, 0.3)')};\n  --input-border-color-hover: ${getInputBorderColor};\n  --input-icon-color: ${getInputColor('rgba(250, 250, 250, 0.8)')};\n  --input-icon-color-hover: ${getInputBorderColor};\n  --right-icon-cursor: ${getIconCursor};\n\n  position: relative;\n\n  width: 100%;\n`;\n\nexport const StyledLabel = styled.label`\n  position: relative;\n\n  width: 100%;\n\n  font-family: 'Poppins';\n  font-size: ${({ theme }) => theme.fontSizes[2]};\n  line-height: calc(21 / 14);\n  letter-spacing: -0.02em;\n  color: rgba(250, 250, 250, 0.8);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoints.tablet}) {\n    font-size: ${({ theme }) => theme.fontSizes[4]};\n    line-height: calc(27 / 18);\n  }\n`;\n\nexport const StyledInput = styled.input`\n  width: 100%;\n\n  padding: 16px;\n  padding-left: 50px;\n\n  outline: none;\n  border: 1px solid var(--input-border-color);\n  border-radius: 6px;\n  color: inherit;\n\n  background: none;\n\n  transition: ${({ theme }) =>\n    theme.transitions.create(['color', 'border-color'])};\n\n  &::placeholder {\n    color: inherit;\n  }\n\n  &:hover,\n  &:focus {\n    color: ${({ theme }) => theme.colors.white[100]};\n    border-color: var(--input-border-color-hover);\n\n    // Icons color on input hover\n    & + span,\n    & + span + span {\n      color: var(--input-icon-color-hover);\n    }\n  }\n`;\n// Base Input icon component\nconst StyledInputIcon = styled.span`\n  position: absolute;\n  top: 50%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 24px;\n  height: 24px;\n\n  color: var(--input-icon-color);\n\n  transition: ${({ theme }) => theme.transitions.create(['color'])};\n\n  transform: translateY(-50%);\n`;\n\nexport const InputLeftIcon = styled(StyledInputIcon)`\n  left: 18px;\n`;\n\nexport const InputRightIcon = styled(StyledInputIcon)`\n  cursor: var(--right-icon-cursor);\n\n  right: 13px;\n`;\n\nexport const StyledInputError = styled.p`\n  margin-top: 8px;\n\n  font-size: 14px;\n  line-height: calc(21 / 14);\n  text-align: left;\n\n  color: ${({ theme }) => theme.colors.red[100]};\n`;\n","import { forwardRef, useRef, useState } from 'react';\nimport {\n  InputLeftIcon,\n  InputRightIcon,\n  StyledFormGroup,\n  StyledInput,\n  StyledInputError,\n  StyledLabel,\n} from './FormInput.styled';\nimport { FiUser, FiLock, FiMail } from 'react-icons/fi';\nimport {\n  AiFillCloseCircle,\n  AiFillCheckCircle,\n  AiFillEye,\n  AiFillEyeInvisible,\n} from 'react-icons/ai';\n\nconst getLeftIcon = name => {\n  switch (name) {\n    case 'name':\n      return <FiUser size=\"24px\" />;\n    case 'email':\n      return <FiMail size=\"24px\" />;\n    case 'password':\n      return <FiLock size=\"24px\" />;\n    default:\n      return null;\n  }\n};\n\nconst getRigthIcon = (\n  isError,\n  isDirty,\n  isSubmitted,\n  isPassword,\n  passwordType\n) => {\n  let icon = null;\n\n  if (isSubmitted) {\n    if (isError) {\n      icon = <AiFillCloseCircle size=\"24px\" />;\n    } else if (isDirty) {\n      icon = <AiFillCheckCircle size=\"24px\" />;\n    }\n  } else if (isPassword) {\n    icon =\n      passwordType === 'text' ? (\n        <AiFillEyeInvisible size=\"24px\" />\n      ) : (\n        <AiFillEye size=\"24px\" />\n      );\n  }\n\n  return icon;\n};\n\nconst FormInput = forwardRef(\n  (\n    {\n      id,\n      label,\n      type,\n      error,\n      isTouched,\n      isDirty,\n      isSubmitted,\n      setValue,\n      ...otherProps\n    },\n    ref\n  ) => {\n    const [passwordType, setPasswordType] = useState('password');\n    const isPassword = useRef(type === 'password');\n\n    const clickInputButtonHandler = () => {\n      if (!!error) {\n        setValue(otherProps.name, '');\n      }\n\n      if (!isSubmitted && isPassword.current) {\n        setPasswordType(prev => (prev === 'password' ? 'text' : 'password'));\n      }\n    };\n\n    return (\n      <StyledFormGroup\n        isError={!!error}\n        isTouched={isTouched}\n        isDirty={isDirty}\n        isSubmitted={isSubmitted}\n        isPassword={isPassword.current}\n      >\n        <StyledLabel>\n          <StyledInput\n            {...otherProps}\n            type={type === 'password' ? passwordType : type}\n            ref={ref}\n            isError={!!error}\n            isTouched={isTouched}\n          />\n          <InputLeftIcon>{getLeftIcon(otherProps.name)}</InputLeftIcon>\n          {(isSubmitted || isPassword.current) && (\n            <InputRightIcon onClick={clickInputButtonHandler}>\n              {getRigthIcon(\n                !!error,\n                isDirty,\n                isSubmitted,\n                isPassword.current,\n                passwordType\n              )}\n            </InputRightIcon>\n          )}\n        </StyledLabel>\n\n        {error && <StyledInputError>{error.message}</StyledInputError>}\n      </StyledFormGroup>\n    );\n  }\n);\n\nexport default FormInput;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSearchParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport Joi from 'joi';\nimport { joiResolver } from '@hookform/resolvers/joi';\n\nimport { addToken } from 'redux/auth/auth.slice';\nimport { loginThunk } from 'redux/auth/auth.thunk';\n\nimport {\n  AuthForm,\n  AuthTitle,\n  Devider,\n  FormButtonGroup,\n  FormGoogleButton,\n  FormNavLinkButton,\n  FormSubmitButton,\n  FormInput,\n} from 'components/form';\nimport { routes } from 'constants/routes';\nimport Loader from 'components/common/Loader/Loader';\n\nconst schema = Joi.object({\n  email: Joi.string()\n    .email({ tlds: { allow: false } })\n    .required(),\n  password: Joi.string().min(1).max(30).required(),\n});\n\nexport default function SigninPage() {\n  const dispatch = useDispatch();\n  const [params] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const googleAuth = useMemo(() => Object.fromEntries(params), [params]);\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: {\n      isSubmitting,\n      touchedFields,\n      errors,\n      dirtyFields,\n      isSubmitted,\n    },\n  } = useForm({\n    mode: 'onSubmit',\n    resolver: joiResolver(schema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  useEffect(() => {\n    if (googleAuth.accessToken && googleAuth.refreshToken) {\n      dispatch(\n        addToken({\n          accessToken: googleAuth.accessToken,\n          refreshToken: googleAuth.refreshToken,\n        })\n      );\n    }\n  }, [dispatch, googleAuth]);\n\n  const signinHandler = async data => {\n    await dispatch(loginThunk(data));\n    //reset();\n  };\n\n  const googleButtonClickHandler = () => {\n    setIsLoading(true);\n  };\n\n  return (\n    <>\n      <AuthForm\n        onSubmit={handleSubmit(signinHandler)}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <AuthTitle>Sign In</AuthTitle>\n        <FormInput\n          type=\"email\"\n          autoComplete=\"username\"\n          placeholder=\"Email\"\n          {...register('email')}\n          setValue={setValue}\n          error={errors['email']}\n          isDirty={dirtyFields['email']}\n          isTouched={touchedFields['email']}\n          isSubmitted={isSubmitted}\n        />\n        <FormInput\n          type=\"password\"\n          autoComplete=\"current-password\"\n          placeholder=\"Password\"\n          {...register('password')}\n          setValue={setValue}\n          error={errors['password']}\n          isDirty={dirtyFields['password']}\n          isTouched={touchedFields['password']}\n          isSubmitted={isSubmitted}\n        />\n\n        <FormButtonGroup>\n          {isSubmitting || isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              <FormSubmitButton\n                type=\"submit\"\n                variant=\"green\"\n                w=\"100%\"\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? 'Loading...' : 'Sign in'}\n              </FormSubmitButton>\n              <Devider />\n              <FormGoogleButton\n                href={`${process.env.REACT_APP_API_URL}/auth/google`}\n                variant=\"dark\"\n                w=\"100%\"\n                h=\"45px\"\n                onClick={googleButtonClickHandler}\n              >\n                Sign in with Google\n              </FormGoogleButton>\n            </>\n          )}\n        </FormButtonGroup>\n      </AuthForm>\n      {!isSubmitting && !isLoading && (\n        <FormNavLinkButton to={routes.REGISTER_PAGE}>\n          Registration\n        </FormNavLinkButton>\n      )}\n    </>\n  );\n}\n"],"names":["AuthForm","styled","form","_templateObject","_taggedTemplateLiteral","_ref","theme","colors","black","_ref2","shadows","base","props","breakpoints","tablet","desktop","AuthTitle","h2","_templateObject2","_ref3","fontWeights","semibold","_ref4","white","Devider","span","_templateObject3","FormButtonGroup","div","_templateObject4","FormSubmitButton","RectButton","_templateObject5","FormGoogleButton","RectLinkButton","_templateObject6","FormNavLinkButton","NavLink","_templateObject7","_ref5","_ref6","transitions","create","_ref7","green","getInputColor","defaultColor","isError","isTouched","isDirty","isSubmitted","red","getInputBorderColor","StyledFormGroup","isPassword","StyledLabel","label","fontSizes","StyledInput","input","_ref8","StyledInputIcon","_ref9","InputLeftIcon","InputRightIcon","StyledInputError","p","_ref10","getLeftIcon","name","_jsx","FiUser","size","FiMail","FiLock","getRigthIcon","passwordType","icon","AiFillCloseCircle","AiFillCheckCircle","AiFillEyeInvisible","AiFillEye","forwardRef","ref","id","type","error","setValue","otherProps","setPasswordType","useState","useRef","_jsxs","current","children","onClick","clickInputButtonHandler","prev","message","schema","Joi","email","tlds","allow","required","password","min","max","SigninPage","dispatch","useDispatch","params","useSearchParams","isLoading","setIsLoading","googleAuth","useMemo","Object","fromEntries","register","handleSubmit","formState","isSubmitting","touchedFields","errors","dirtyFields","useForm","mode","resolver","joiResolver","defaultValues","useEffect","accessToken","refreshToken","addToken","_Fragment","onSubmit","async","loginThunk","data","noValidate","autoComplete","FormInput","placeholder","Loader","variant","w","disabled","href","concat","process","REACT_APP_API_URL","h","googleButtonClickHandler","to","routes","REGISTER_PAGE"],"sourceRoot":""}